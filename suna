#!/usr/bin/env sh
# https://github.com/fuku77/

baseDir="$(cd "$(dirname -- "$0")" && pwd)"
sunaDir="$baseDir/.suna"

logTmp="$sunaDir"/log.tmp
genTmp="$sunaDir"/gen.tmp
loopTmp="$sunaDir"/lp.tmp

# Source config
. "$baseDir"/config

###################
#  Error Logging 

# Usage: log "DEBUG|INFO|WARNING|ERROR" "foo"
log () {
    loglevel=$1
    content=$2

    # Log everything to log file regardless of log level
    echo "$(date +'%s | %d/%m/%y | %H:%M:%S') | $(printf "%-6s" "$loglevel") |: $content" >> "$logFile"
    
    # Keep log file at the max size if it goes over it 
    logLength=$(wc -l < "$logFile")
    [ "$logLength" -gt "$logSize" ] && tail -"$logSize" "$logFile" > "$logTmp" && cat "$logTmp" > "$logFile"
    rm -f "$logTmp"

    case $loglevel in
        ERROR  )
            [ "$verbose" -ge 1 ] && echo "$(tput setaf 1)$loglevel$(tput setaf 15): $content"
            exit 1
            ;;
        WARNING )
            [ "$verbose" -ge 1 ] && echo "$(tput setaf 3)$loglevel:$(tput setaf 15) $content"
            ;;
        INFO )
            [ "$verbose" -ge 2 ] && echo "$(tput setaf 4)$loglevel:$(tput setaf 15) $content"
            ;;
        DEBUG ) 
            [ "$verbose" -ge 3 ] && echo "$(tput setaf 2)$loglevel:$(tput setaf 15) $content"
            ;;
        * ) 
            return 1
            ;;
    esac
}

#
###################

##################
#  Help & Usage 

usage="Usage: $0 [ -h|c|p ] [ -v|q ] [ --debug ] [ -o DIR -i DIR ]"
help="
suna - minimalistic, static HTML-templating blog generator written entirely in POSIX-compliant shell (https://github.com/fuku77/suna)

$usage

Options:
    -v --verbose     Be more verbose
    -q --quiet       Suppress all output
       --debug       Set log level to DEBUG

    -o --output DIR  Output directory. 'root' by default
    -i --input DIR   Input directory. 'src' by default

Actions:
    -h --help        Shows this help text
    -c --clean       Clean generated files
    -p --process     Process src files and create HTML pages
" 

#
##################

############################
#  Command-line Arguments 

while getopts "hvqcpo:i:-:" arg; do
    case $arg in
        h )
            action=0
            ;;
        v )
            verbose=2
            ;;
        q )
            verbose=0
            ;;
        c )
            action=1
            ;;
        p )
            action=2
            ;;
        o )
            # Option is missing an argument
            [ -z "$OPTARG" ] && echo "$usage" && exit 2;
            outputDir="$OPTARG"
        ;;
        i )
            [ -z "$OPTARG" ] && echo "$usage" && exit 2;
            srcDir="$OPTARG"
        ;;
        - )
            case $OPTARG in
                help ) 
                    action=0
                    ;;
                verbose )
                    verbose=2
                    ;;
                quiet )
                    verbose=0
                    ;;
                debug )
                    verbose=3
                    ;;
                clean )
                    action=1
                    ;;
                process )
                    action=2
                    ;;
                output )
                    # ${!OPTIND} is not posix-compliant so we use this instead to get the argument
                    [ -z "$(eval "echo \"\$$OPTIND\"")" ] && echo "$usage" && exit 2;
                    outputDir="$(eval "echo \"\$$OPTIND\"")"
                    ;;
                input )
                    [ -z "$(eval "echo \"\$$OPTIND\"")" ] && echo "$usage" && exit 2;
                    srcDir="$(eval "echo \"\$$OPTIND\"")"
                    ;;
                * )
                    echo "$usage"
                    exit 2
                    ;;
            esac
            ;;
        *)
            echo "$usage"
            exit 2
            ;;
    esac
done

#
############################

############
#  Checks

[ ! -d "$outputDir" ] && { mkdir -p "$outputDir" > /dev/null 2>&1 || log "ERROR" "Output directory not valid."; }

[ "$srcDir" = "$outputDir" ] && log "WARNING" "Input directory is the same as the output directory. Weird things might happen.\nHit enter to continue or Ctrl+C to exit." && 
    read _;

[ ! -d "$srcDir" ] && log "ERROR" "Input/Source directory does not exist."

[ ! "$(ls -A "$srcDir")" ] && log "ERROR" "Input/Source directory is empty."

[ ! -d "$sunaDir" ] && log "ERROR" "Suna directory does not exist."
[ ! -f "$sunaDir"/interpreter ] && log "ERROR" "Suna's markdown parser is missing."

[ ! -f "$defTemplateFile" ] && log "ERROR" "Default template file does not exist."

#
############

####################
#  Main Functions 

clean_tmp () {
    log "INFO" "Removing temporary files..."
    rm -rf "$genTmp" "$loopTmp" "$logTmp"
}

cleanup () {
    log "INFO" "Emptying output directory..."
    rm -rf "${outputDir:?}"/*
    clean_tmp
}

copy_structure () {
    f="${1:?}"
    fStripped="${f#"$srcDir/"}"
    
    mkdir -p "$outputDir"

    # Folders
    [ -d "$f" ] && 
        {
            log "DEBUG" "Found folder '$fStripped'. Creating '$outputDir/$fStripped'."
            mkdir -p "$outputDir/$fStripped"
            return
        }

    # Markdown Files
    # Check if markdown
    [ "$(echo "${fStripped##*.}" | sed -n '/^[mM][dD]$\|^[mM][aA][rR][kK][dD][oO][wW][nN]$/p')" ] &&
        { 
            log "DEBUG" "Found markdown file '$fStripped'. Creating '${fStripped%.*}.html'."
            touch "$outputDir/${fStripped%.*}.html"
            return; 
        }

    # Other Files
    log "DEBUG" "Found regular file '$f'. Copying."
    cp "$f" "$outputDir/$fStripped"
}

generate_page () {
    f=${1:?}
    fStripped="${f#"$srcDir/"}"

    # Only operate on files.
    [ -d "$f" ] && return

    # Only operate on markdown files.
    [ "$(echo "${fStripped##*.}" | sed -n '/^[mM][dD]$\|^[mM][aA][rR][kK][dD][oO][wW][nN]$/p')" ] || return

    tmp="${f#"$srcDir/"}"
    outFile="$outputDir/${tmp%.*}.html" # corresponding html file to be created

    # Parse markdown to html using suna's interpreter, send it to tmp file
    log "INFO" "Parsing Markdown file: '$fStripped'" 
    parse_markdown "$f" > "$genTmp"

    # Get any file rules from the MD file, or use fallbacks 
    # sets $fileTemplate
    # sets $pageTitle
    parse_rules_from_file "$f"

    log "DEBUG" "pageTitle: '$pageTitle'"
    log "DEBUG" "template: '$fileTemplate'"
    log "DEBUG" "srcFile: '$f'"
    log "DEBUG" "outFile: '$outFile'"

    log "INFO" "Creating HTML file using template '${fileTemplate#"$sunaDir/"}': '${outFile#"$outputDir/"}'"
    
    # Create html file using $fileTemplate
    cp "$fileTemplate" "$outFile"

    # Set the macros in $outFile to their values
    set_macros_in_file "$outFile"

    # Remove rules from $outFile file
    sed -i '/^<!--\ *{\ *$/,/^\ *}\ *-->$/ s/.*//' "$outFile"

    clean_tmp
}

## ! Most of the functions below are for use in conjunction inside generate_page, 
## ! For example set_macros_in_file using $pageTitle which is defined in parse_rules_from_file

# Usage: parse_markdown "filepath"
parse_markdown () {
    "$sunaDir"/interpreter "$1"
}

parse_rules_from_file () {
    # If file has a template specified, use that.
    fileTemplate="$sunaDir/$(sed -n '/^<!--\ *{\ *$/,/^\ *}\ *-->$/ s_\ *!template "\(.*\)"_\1_p' "$1")"
    [ "$fileTemplate" = "$sunaDir/" ] && fileTemplate="$defTemplateFile"

    # If file has a title specified, use that. else, use the first header. else, use file name.
    pageTitle="$(sed -n '/^<!--\ *{\ *$/,/^\ *}\ *-->$/ s_\ *!title "\(.*\)"_\1_p' "$1")"
    [ -z "$pageTitle" ] && pageTitle="$(sed -n '/^#\{1,6\} / s/^#\{1,6\} \(.*\)/\1/p' "$1" | head -1)"
    [ -z "$pageTitle" ] && pageTitle="$(basename "${1%.*}")" 
}

set_macros_in_file () {
    # Set page content
    sed -i -e "/{{\ *CONTENT\ *}}/{r $genTmp" -e "d}" "$1"
    # Set page title 
    sed -i "s/{{\ *TITLE\ *}}/$pageTitle/g" "$1"
}

#
####################

####################
#  Execute Action 

case $action in
    0)
        echo "$help"
        exit 0
        ;;
    1)
        cleanup
        exit 0
        ;;
    2)
        log "DEBUG" "--------------------------------------------------------------------------------------"
        cleanup
        log "INFO" "Copying file structure from '$(basename "$srcDir")' to '$(basename "$outputDir")'..."
        find "$srcDir"/* > "$loopTmp"
        while IFS= read -r f
        do
            copy_structure "$f"
            generate_page "$f"
        done < "$loopTmp"
        exit 0
        ;;
esac

#
####################
